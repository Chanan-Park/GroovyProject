<?xml version="1.0" encoding="UTF-8"?>
<!-- mapper 기본설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체 내에서 유일해야 함, 주로 파일명) -->
<mapper namespace="yeojin">
	
	<!-- 이 안에 sql문을 적는다 -->
	
																											<!-- 일정 관리 시작 -->	
	
	<!-- ========================================================================== -->
	<!-- 전사일정 소분류 보여주기 -->
	<select id="showCompanyCalendar" resultType="com.spring.groovy.schedule.model.CalSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname
		from tbl_calendar_small_category
		where fk_lgcatgono = 1
		order by smcatgono asc
	</select>
	
	
	<!-- 전사일정 소분류명 존재여부 확인 -->
	<select id="existComCalendar"  parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 1 and smcatgoname = #{comSmcatgoname}
	</select>
	
	<!-- 전사일정 소분류 추가 -->	
	<insert id="addComCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empno)
		values(seq_smcatgono.nextval, 1, #{comSmcatgoname}, #{empno})
	</insert>
	<!-- ========================================================================== -->
	
	
	<!-- ========================================================================== -->
	<!-- 팀별일정 소분류 보여주기 -->
	<select id="showTeamCalendar" parameterType="String" resultType="com.spring.groovy.schedule.model.CalSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname, fk_empno, department
		from
		(
		    select smcatgono, fk_lgcatgono, smcatgoname, fk_empno, E.department
		    from tbl_calendar_small_category C join tbl_employee E
		    on C.fk_empno = E.empno
		    where fk_lgcatgono = 2
		    order by smcatgono asc
		)
		where department = #{dept}
	</select>
	
	
	<!-- 팀별일정 소분류명 존재여부 확인 -->
	<select id="existTeamCalendar" parameterType="HashMap" resultType="int">
		select count(*)
		from 
		(
		    select smcatgono, fk_lgcatgono, smcatgoname, fk_empno, E.department
		    from tbl_calendar_small_category C join tbl_employee E
		    on C.fk_empno = E.empno
		    where fk_lgcatgono = 2 and department = (select department from tbl_employee where empno = #{empno})
		    order by smcatgono asc
		)
		where fk_lgcatgono = 2 and smcatgoname = #{teamSmcatgoname}
	</select>
	
	<!-- 팀별일정 소분류 추가 -->
	<insert id="addTeamCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empno)
		values(seq_smcatgono.nextval, 2, #{teamSmcatgoname}, #{empno})
	</insert>
	<!-- ========================================================================== -->
	
	
	<!-- ========================================================================== -->
	<!-- 개인일정 소분류명 존재여부 확인 -->
	<select id="existMyCalendar" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = 3 and fk_empno = #{empno} and smcatgoname = #{mySmcatgoname}
	</select>
	
	<!-- 개인일정 소분류 추가 -->	
	<insert id="addMyCalendar" parameterType="HashMap">
		insert into tbl_calendar_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empno)
		values(seq_smcatgono.nextval, 3, #{mySmcatgoname}, #{empno})
	</insert>
	
	
	<!-- 개인일정 소분류 보여주기 -->
	<select id="showMyCalendar" parameterType="String" resultType="com.spring.groovy.schedule.model.CalSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname, fk_empno
		from tbl_calendar_small_category
		where fk_lgcatgono = 3 and fk_empno = #{empno}
		order by smcatgono asc
	</select>
	<!-- ========================================================================== -->
	
	
	<!-- ========================================================================== -->
	<!-- 수정하려는 전사일정 및 팀별일정, 개인일정 소분류명이 이미 해당 사용자가 만든 소분류 카테고리명으로 존재하는지 유무 알아오기 -->
	<select id="existsCalCateg" parameterType="HashMap" resultType="int">
	    select count(*)
		from tbl_calendar_small_category
		where fk_lgcatgono = #{caltype} and 
			  fk_empno = #{empno} and 
			  smcatgoname = #{smcatgoname}
	</select>
	
	<!-- 전사일정 및 팀별일정, 개인일정 소분류명 수정하기  -->
	<update id="editCalCateg"  parameterType="HashMap">
		update tbl_calendar_small_category set smcatgoname = #{smcatgoname}
		where smcatgono = #{smcatgono}
	</update>
	
	
	<!-- 전사일정 및 팀별일정, 개인일정 소분류 삭제하기 -->
	<delete id="delCalCateg" parameterType="String">
		delete tbl_calendar_small_category
		where smcatgono = #{smcatgono}
	</delete>
	<!-- ========================================================================== -->
	
	
	<!-- 일정 등록시 전사일정, 팀별일정, 개인일정 선택에 따른 서브캘린더 종류를 알아오기 -->
	<select id="selectSmallCateg" parameterType="HashMap" resultType="com.spring.groovy.schedule.model.CalSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname, fk_empno, department
	    from tbl_calendar_small_category C join tbl_employee E
	    on C.fk_empno = E.empno
		<if test='fk_lgcatgono == "1"'>
		    where fk_lgcatgono = 1 and department = (select department from tbl_employee where empno = #{empno})
		</if>
		<if test='fk_lgcatgono == "2"'>
		    where fk_lgcatgono = 2 and department = (select department from tbl_employee where empno = #{empno})
		</if>
		<if test='fk_lgcatgono == "3"'>
		    where fk_lgcatgono = 3 and fk_empno = #{empno}
		</if>
		 order by smcatgono asc
	</select>
	
	
	<!-- 참석자를 찾기 위한 특정글자가 들어간 회원명단 불러오기  -->
	<select id="searchJoinUserList" parameterType="String" resultType="com.spring.groovy.management.model.MemberVO">
		select empno, name, cpemail
		from tbl_employee
		where lower(name) like '%'|| lower(#{joinUserName}) ||'%'
	</select>
	
	
	
	<!-- 일정 등록하기 -->
	<insert id="insertScheduleEnd" parameterType="HashMap">
		insert into tbl_calendar_schedule(scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_empno) 
    	values(seq_scheduleno.nextval, to_date(#{startdate}, 'yyyymmddhh24miss'), to_date(#{enddate}, 'yyyymmddhh24miss'), #{subject}, #{color}, #{place}, #{joinuser}, #{content}, #{fk_smcatgono}, #{fk_lgcatgono}, #{empno})  
	</insert>
	
	
	<!-- 모든 캘린더(사내캘린더, 내캘린더, 공유받은캘린더)를 불러오는것 -->	
	<resultMap type="HashMap" id="allScheMap">
		<result property="scheduleno" column="scheduleno" javaType="String" />
		<result property="startdate" column="startdate" javaType="String" />
		<result property="enddate" column="enddate" javaType="String" />
		<result property="subject" column="subject" javaType="String" />
		<result property="color" column="color" javaType="String" />
		<result property="place" column="place" javaType="String" />
		<result property="joinuser" column="joinuser" javaType="String" />
		<result property="content" column="content" javaType="String" />
		<result property="fk_smcatgono" column="fk_smcatgono" javaType="String" />
		<result property="fk_lgcatgono" column="fk_lgcatgono" javaType="String" />
		<result property="fk_empno" column="fk_empno" javaType="String" />
		<result property="department" column="department" javaType="String" />
	</resultMap>
	
	<select id="selectSchedule" parameterType="HashMap" resultMap="allScheMap">
		select scheduleno, startdate, enddate, subject, color, place, joinuser, content, fk_smcatgono, fk_lgcatgono, fk_empno, department
		from tbl_calendar_schedule C join tbl_employee E
		on C.fk_empno = E.empno
		where C.fk_empno = #{empno} OR
		fk_lgcatgono = 1 OR
		(fk_lgcatgono = 2 AND department = (select department from tbl_employee where empno = #{empno}) ) OR
		(fk_lgcatgono = 3 and lower(joinuser) like '%'|| lower(#{cpemail}) ||'%') OR
        (fk_lgcatgono = 3 and C.fk_empno = #{empno} )
		order by scheduleno asc
	</select>
		
		
	<!-- 일정 상세보기 -->
	<resultMap type="HashMap" id="viewScheduleMap">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="FK_EMPNO" 	column="fk_empno" 		javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="DEPARTMENT" 	column="department" 	javaType="String" />
		<result property="POSITION" 	column="position" 	javaType="String" />
	</resultMap>
	
	<select id="viewSchedule" parameterType="String" resultMap="viewScheduleMap">
		select SD.scheduleno
		     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
		     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
		     , SD.subject
		     , SD.color
		     , nvl(SD.place,'-') as place
		     , nvl(SD.joinuser,'참석자가 없습니다.') as joinuser
		     , nvl(SD.content,'') as content
		     , SD.fk_smcatgono
		     , SD.fk_lgcatgono
		     , SD.fk_empno
		     , M.name
		     , SC.smcatgoname
		     , department
     		 , position
		from tbl_calendar_schedule SD 
		JOIN tbl_employee M
		ON SD.fk_empno = M.empno
		JOIN tbl_calendar_small_category SC
		ON SD.fk_smcatgono = SC.smcatgono
		where SD.scheduleno = #{scheduleno}
	</select>	
	
		
	<!-- 일정 수정하기 마무리  -->	
	<update id="updateScheduleEnd" parameterType="HashMap">
		update tbl_calendar_schedule 
		set startdate = to_date(#{startdate}, 'yyyymmddhh24miss'), enddate = to_date(#{enddate}, 'yyyymmddhh24miss'), subject = #{subject}, color = #{color},
			place = #{place}, joinuser = #{joinuser}, content = #{content}, fk_smcatgono = #{fk_smcatgono}, fk_lgcatgono = #{fk_lgcatgono}, fk_empno = #{empno}
		where scheduleno = #{scheduleno}
	
	</update>
		
		
	<!-- 일정 삭제하기 -->
	<delete id="deleteSchedule" parameterType="String">
		delete from tbl_calendar_schedule
		where scheduleno = #{scheduleno}
	</delete>
		
	
	<!-- 일정 검색 전체 글 개수 구하기 -->
	<select id="getScheSearchCnt" parameterType="HashMap" resultType="int">
		
		select count(*) 
		from tbl_calendar_schedule SD join tbl_employee E
		on SD.fk_empno = E.empno
		where (( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
		or    ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} )) <!-- 시작날짜와 종료날짜가 저 사이에 들어있는 동시에 아래 조건 -->
		
		<!-- 일정분류가 없고 검색어도 없는 경우 -->
		<if test='fk_lgcatgono == "" and pagination.searchWord == "" and pagination.searchType == "" '>
			and ((SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
			OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' ))
		</if>
		
		<!-- 검색분류와 일정분류가 있고 검색어가 없는 경우 -->
		<if test='fk_lgcatgono != "" and pagination.searchWord == "" and pagination.searchType != "" '>
			<choose>
	        	<!-- 전사일정 -->
	            <when test='fk_lgcatgono == "1" '>
	               and SD.fk_lgcatgono = 1
	            </when>
	            <!-- 팀별일정 -->
	            <when test='fk_lgcatgono == "2" '>
	               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
	            </when>
	            <!-- 개인일정 -->
	            <when test='fk_lgcatgono == "3" '>
	               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
	            </when>
			</choose>
		</if>
		
		<!-- 검색분류가 있고 검색어가 없는 경우 -->
		<if test='fk_lgcatgono == "" and pagination.searchWord == "" and pagination.searchType != "" '>
			and (SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
			OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' )
		</if>
		
		<!-- 검색 분류가 없고 검색어가 있는 경우 -->
		<if test='pagination.searchWord != "" and pagination.searchType == "" '>
			and ((lower(SD.subject) like '%'||lower(#{pagination.searchWord})||'%') or (lower(SD.content) like '%'||lower(#{pagination.searchWord})||'%') or (lower(SD.joinuser) like '%'||lower(#{pagination.searchWord})||'%'))
			
			<choose>
				<!-- 일정분류 선택 안할 때 -->
				<when test='fk_lgcatgono == "" '></when>
				
	        	<!-- 전사일정 -->
	            <when test='fk_lgcatgono == "1"'>
	               and SD.fk_lgcatgono = 1
	            </when>
	            <!-- 팀별일정 -->
	            <when test='fk_lgcatgono == "2"'>
	               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
	            </when>
	            <!-- 개인일정 -->
	            <when test='fk_lgcatgono == "3"'>
	               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
	            </when>
			</choose>
		</if>
		
		<!-- 전사일정이고 검색어가 없는 경우 -->
		<if test='fk_lgcatgono == "1" and pagination.searchWord == "" and pagination.searchType == "" '>
			and SD.fk_lgcatgono = 1
		</if>
		
		<!-- 팀별일정이고 검색어가 없는 경우 -->
		<if test='fk_lgcatgono == "2" and pagination.searchWord == "" and pagination.searchType == "" '>
			and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		</if>
		
		<!-- 개인일정이고 검색어가 없는 경우 -->
		<if test='fk_lgcatgono == "3" and pagination.searchWord == "" and pagination.searchType == "" '>
			and SD.fk_lgcatgono = 3 AND SD.fk_empno = #{empno}
		</if>
		
		<!-- 참석자로 검색할 경우 -->
      	<if test='pagination.searchWord != "" and pagination.searchType eq "joinuser" '>
        	and SD.fk_lgcatgono != 1                        
          	and SD.fk_empno = #{empno}                   
          	and lower(SD.joinuser) like '%'||lower(#{pagination.searchWord})||'%'
      	</if>
      	
	    <!-- 참석자 외로 검색할 경우 -->
	    <if test='pagination.searchWord != "" and pagination.searchType neq "joinuser" and pagination.searchType != "" '>
	    	and lower(#{pagination.searchType}) like '%'||lower(#{pagination.searchWord})||'%'
	        <choose>
	        	<!-- 전사일정 -->
	            <when test='fk_lgcatgono == "1"'>
	               and SD.fk_lgcatgono = 1
	            </when>
	            <!-- 팀별일정 -->
	            <when test='fk_lgcatgono == "2"'>
	               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
	            </when>
	            <!-- 개인일정 -->
	            <when test='fk_lgcatgono == "3"'>
	               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
	            </when>
			</choose>
		</if>
		
	</select>
		
	
	<!-- 한 페이지에 표시할 글 목록 -->
	<resultMap type="HashMap" id="getScheduleListMap">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="FK_EMPNO" 	column="fk_empno" 		javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="DEPARTMENT" 	column="department" 	javaType="String" />
		<result property="POSITION" 	column="position" 		javaType="String" />
		<result property="CPEMAIL" 		column="cpemail" 		javaType="String" />
	</resultMap>
	<select id="getScheduleList" parameterType="HashMap" resultMap="getScheduleListMap">
		select scheduleno, 
			   startdate, enddate, subject, color, place, joinuser, content, 
			   fk_smcatgono, fk_lgcatgono, smcatgoname, 
			   fk_empno, name, department, position, cpemail
		from 
		(
			select  row_number() over(order by SD.scheduleno desc) as rno 
			     , SD.scheduleno
			     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
			     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
			     , SD.subject
			     , SD.color
			     , nvl(SD.place,'-') as place
			     , nvl(SD.joinuser,'공유자가 없습니다.') as joinuser
			     , nvl(SD.content,'') as content
			     , SD.fk_smcatgono
			     , SD.fk_lgcatgono
			     , SD.fk_empno
			     , E.name
			     , SC.smcatgoname
			     , E.department
			     , E.position
			     , E.cpemail
			from tbl_calendar_schedule SD 
			JOIN tbl_employee E
			ON SD.fk_empno = E.empno
			JOIN tbl_calendar_small_category SC
			ON SD.fk_smcatgono = SC.smcatgono
			
			where (( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
			or    ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ))
			
			<!-- 일정분류가 없고 검색어도 없는 경우 -->
			<if test='fk_lgcatgono == "" and pagination.searchWord == "" and pagination.searchType == "" '>
				and ((SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
				OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' ))
			</if>
			
			<!-- 검색분류가 있고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "" and pagination.searchWord == "" and pagination.searchType != "" '>
				and (SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
				OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' )
			</if>
			
			<!-- 검색분류와 일정분류가 있고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono != "" and pagination.searchWord == "" and pagination.searchType != "" '>
				<choose>
		        	<!-- 전사일정 -->
		            <when test='fk_lgcatgono == "1" '>
		               and SD.fk_lgcatgono = 1
		            </when>
		            <!-- 팀별일정 -->
		            <when test='fk_lgcatgono == "2" '>
		               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		            </when>
		            <!-- 개인일정 -->
		            <when test='fk_lgcatgono == "3" '>
		               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
		            </when>
				</choose>
			</if>
			
			<!-- 검색 분류가 없고 검색어가 있는 경우 -->
			<if test='pagination.searchWord != "" and pagination.searchType == "" '>
				and ((lower(SD.subject) like '%'||lower(#{pagination.searchWord})||'%') or (lower(SD.content) like '%'||lower(#{pagination.searchWord})||'%') or (lower(SD.joinuser) like '%'||lower(#{pagination.searchWord})||'%'))
				
				<choose>
					<!-- 일정분류 선택 안할 때 -->
					<when test='fk_lgcatgono == "" '></when>
					
		        	<!-- 전사일정 -->
		            <when test='fk_lgcatgono == "1" '>
		               and SD.fk_lgcatgono = 1
		            </when>
		            <!-- 팀별일정 -->
		            <when test='fk_lgcatgono == "2" '>
		               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		            </when>
		            <!-- 개인일정 -->
		            <when test='fk_lgcatgono == "3" '>
		               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
		            </when>
				</choose>
			</if>
			
			<!-- 전사일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "1" and pagination.searchWord == "" and pagination.searchType == "" '>
				and SD.fk_lgcatgono = 1
			</if>
			
			<!-- 팀별일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "2" and pagination.searchWord == "" and pagination.searchType == "" '>
				and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
			</if>
			
			<!-- 개인일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "3" and pagination.searchWord == "" and pagination.searchType == "" '>
				and SD.fk_lgcatgono = 3 AND SD.fk_empno = #{empno}
			</if>
			
			<!-- 참석자로 검색할 경우 -->
	      	<if test='pagination.searchWord != "" and pagination.searchType eq "joinuser" '>
	        	and SD.fk_lgcatgono != 1                        
	          	and SD.fk_empno = #{empno}                   
	          	and lower(SD.joinuser) like '%'||lower(#{pagination.searchWord})||'%'
	      	</if>
	      	
			<!-- 참석자 외로 검색할 경우 -->
		    <if test='pagination.searchWord != "" and pagination.searchType neq "joinuser" and pagination.searchType != "" '>
		    	and lower(#{pagination.searchType}) like '%'||lower(#{pagination.searchWord})||'%'
		        <choose>
		        	<!-- 전사일정 -->
		            <when test='fk_lgcatgono == "1"'>
		               and SD.fk_lgcatgono = 1
		            </when>
		            <!-- 팀별일정 -->
		            <when test='fk_lgcatgono == "2"'>
		               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		            </when>
		            <!-- 개인일정 -->
		            <when test='fk_lgcatgono == "3"'>
		               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
		            </when>
				</choose>
			</if>
		
		) V 
		where V.rno between #{pagination.startRno} and #{pagination.endRno}
	
	</select>	
	
		
	<!-- 검색한 일정 다운로드 받기 -->
	<resultMap type="HashMap" id="scheDownListMap">
		<result property="SCHEDULENO" 	column="scheduleno" 	javaType="String" />
		<result property="STARTDATE" 	column="startdate" 		javaType="String" />
		<result property="ENDDATE" 		column="enddate" 		javaType="String" />
		<result property="SUBJECT" 		column="subject" 		javaType="String" />
		<result property="COLOR" 		column="color" 			javaType="String" />
		<result property="PLACE" 		column="place" 			javaType="String" />
		<result property="JOINUSER" 	column="joinuser" 		javaType="String" />
		<result property="CONTENT" 		column="content" 		javaType="String" />
		<result property="FK_SMCATGONO" column="fk_smcatgono" 	javaType="String" />
		<result property="FK_LGCATGONO" column="fk_lgcatgono" 	javaType="String" />
		<result property="SMCATGONAME" 	column="smcatgoname" 	javaType="String" />
		<result property="FK_EMPNO" 	column="fk_empno" 		javaType="String" />
		<result property="NAME" 		column="name" 			javaType="String" />
		<result property="DEPARTMENT" 	column="department" 	javaType="String" />
		<result property="POSITION" 	column="position" 		javaType="String" />
		<result property="CPEMAIL" 		column="cpemail" 		javaType="String" />
	</resultMap>
	<select id="scheDownList" parameterType="HashMap" resultMap="scheDownListMap">
		select scheduleno, 
			   startdate, enddate, subject, color, place, joinuser, content, 
			   fk_smcatgono, fk_lgcatgono, smcatgoname, 
			   fk_empno, name, department, position, cpemail
		from 
		(
			select  row_number() over(order by SD.scheduleno desc) as rno 
			     , SD.scheduleno
			     , to_char(SD.startdate,'yyyy-mm-dd hh24:mi') as startdate
			     , to_char(SD.enddate,'yyyy-mm-dd hh24:mi') as enddate  
			     , SD.subject
			     , SD.color
			     , nvl(SD.place,'-') as place
			     , nvl(SD.joinuser,'공유자가 없습니다.') as joinuser
			     , nvl(SD.content,'') as content
			     , SD.fk_smcatgono
			     , SD.fk_lgcatgono
			     , SD.fk_empno
			     , E.name
			     , SC.smcatgoname
			     , E.department
			     , E.position
			     , E.cpemail
			from tbl_calendar_schedule SD 
			JOIN tbl_employee E
			ON SD.fk_empno = E.empno
			JOIN tbl_calendar_small_category SC
			ON SD.fk_smcatgono = SC.smcatgono
			
			where (( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) 
			or    ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ))
			
			<!-- 일정분류가 없고 검색어도 없는 경우 -->
			<if test='fk_lgcatgono == "" and searchWord == "" and searchType == "" '>
				and ((SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
				OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' ))
			</if>
			
			<!-- 검색분류가 있고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "" and searchWord == "" and searchType != "" '>
				and (SD.fk_lgcatgono = 1 OR (SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})) OR SD.fk_empno = #{empno})
				OR ( SD.fk_empno != #{empno} and lower(joinuser) like '%'||lower(#{cpemail})||'%' )
			</if>
			
			<!-- 검색 분류가 없고 검색어가 있는 경우 -->
			<if test='searchWord != "" and searchType == "" '>
				and ((lower(SD.subject) like '%'||lower(#{searchWord})||'%') or (lower(SD.content) like '%'||lower(#{searchWord})||'%') or (lower(SD.joinuser) like '%'||lower(#{searchWord})||'%'))
				
				<choose>
					<!-- 일정분류 선택 안할 때 -->
					<when test='fk_lgcatgono == "" '></when>
					
		        	<!-- 전사일정 -->
		            <when test='fk_lgcatgono == "1" '>
		               and SD.fk_lgcatgono = 1
		            </when>
		            <!-- 팀별일정 -->
		            <when test='fk_lgcatgono == "2" '>
		               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		            </when>
		            <!-- 개인일정 -->
		            <when test='fk_lgcatgono == "3" '>
		               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
		            </when>
				</choose>
			</if>
			
			<!-- 전사일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "1" and searchWord == "" and searchType == "" '>
				and SD.fk_lgcatgono = 1
			</if>
			
			<!-- 팀별일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "2" and searchWord == "" and searchType == "" '>
				and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
			</if>
			
			<!-- 개인일정이고 검색어가 없는 경우 -->
			<if test='fk_lgcatgono == "3" and searchWord == "" and searchType == "" '>
				and SD.fk_lgcatgono = 3 AND SD.fk_empno = #{empno}
			</if>
			
			<!-- 참석자로 검색할 경우 -->
	      	<if test='searchWord != "" and searchType eq "joinuser" '>
	        	and SD.fk_lgcatgono != 1                        
	          	and SD.fk_empno = #{empno}                   
	          	and lower(SD.joinuser) like '%'||lower(#{pagination.searchWord})||'%'
	      	</if>
	      	
			<!-- 참석자 외로 검색할 경우 -->
		    <if test='searchWord != "" and searchType neq "joinuser" and searchType != "" '>
		    	and lower(#{searchType}) like '%'||lower(#{searchWord})||'%'
		        <choose>
		        	<!-- 전사일정 -->
		            <when test='fk_lgcatgono == "1"'>
		               and SD.fk_lgcatgono = 1
		            </when>
		            <!-- 팀별일정 -->
		            <when test='fk_lgcatgono == "2"'>
		               and SD.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})
		            </when>
		            <!-- 개인일정 -->
		            <when test='fk_lgcatgono == "3"'>
		               and SD.fk_lgcatgono = 3 and SD.fk_empno = #{empno}
		            </when>
				</choose>
			</if>
		
		) V 
	</select>	
		
		
	<!-- 해당 사원이 생성한 개인일정 카테고리가 있는지 여부 -->
	<select id="smallCategCheck" parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar_small_category 
		where fk_empno = #{empno} and fk_lgcatgono = 3
	</select>
		
	
	<!-- 해당 부서에 생성한 카테고리가 있는지 여부 -->
	<select id="teamSmallCategCheck" parameterType="String" resultType="int">
		select count(*)
		from tbl_calendar_small_category SC
		JOIN tbl_employee E
		ON SC.fk_empno = E.empno
		where SC.fk_lgcatgono = 2 AND E.department = (select department from tbl_employee where empno = #{empno})       
	</select>	
		
	
	<!-- 전사 일정에 생성한 카테고리가 있는지 여부 -->
	<select id="comSmallCategCheck" resultType="int">
		select count(*)
		from tbl_calendar_small_category         
		where fk_lgcatgono = 1   
	</select>	
			
	<!-- ======================================================================================================================================================================================================= -->
		
		
																								<!-- 자원 예약 시작 -->	
		
	<!-- 자원 항목 불러오기 -->	
	<select id="selectSmallCategory" parameterType="HashMap" resultType="com.spring.groovy.reservation.model.ReservSmallCategoryVO">
		select smcatgono, fk_lgcatgono, smcatgoname, sc_status
		from tbl_reservation_small_category
		where fk_lgcatgono = #{fk_lgcatgono}     
	</select>		
		
		
	<!-- === 자원 예약하기 ===  -->	
	<insert id="addReservation" parameterType="HashMap">
		insert into tbl_reservation(reservationno, startdate, enddate, realuser, fk_smcatgono, fk_lgcatgono, fk_empno, reservdate, confirm,  status, return_time)
		values(seq_reservationno.nextval,  to_date(#{startdate}, 'yyyymmddhh24miss'),  to_date(#{enddate}, 'yyyymmddhh24miss'), #{realuser}, #{fk_smcatgono}, #{fk_lgcatgono}, #{empno}, sysdate, 0, 0, #{returnTime})
	</insert>	
		
	
	<!-- 선택한 날짜에 따른 예약된 시간 가져오기 -->	
	<select id="reservTime" parameterType="HashMap" resultType="com.spring.groovy.reservation.model.ReservationVO">
		select reservationno, to_char(startdate, 'yyyymmddhh24') as startdate, to_char(enddate, 'yyyymmddhh24') as enddate, fk_smcatgono, fk_lgcatgono, confirm,  status
		from tbl_reservation
		where (( to_char(startdate,'YYYY-MM-DD') between #{selectDate} and #{selectDate} )
		or  ( to_char(enddate,'YYYY-MM-DD') between #{selectDate} and #{selectDate} ) )
		and fk_lgcatgono = #{fk_lgcatgono}
		and (status = 0 or status = 2)
	</select>
		
		
	<!-- 예약일자에 예약이 존재하는지 여부 확인 -->
	<select id="existReservation" parameterType="HashMap" resultType="int">
		select count(*)
		from tbl_reservation
		where (( to_char(startdate,'yyyymmddhh24miss') between #{startdate} and #{enddate} )
		or  ( to_char(enddate,'yyyymmddhh24miss') between #{startdate} and #{enddate} ) )
		and fk_lgcatgono = #{fk_lgcatgono} and fk_smcatgono = #{fk_smcatgono}
	</select>
		
		
	<!-- 예약 내역 전체 개수 구하기 -->	
	<select id="getResrvAdminSearchCnt" parameterType="HashMap" resultType="int">
	
		select count(*)
		from 
		(
		    select row_number() over(order by reservationno desc) as rno,
		           reservationno, to_char(startdate, 'yyyymmddhh24') as startdate, to_char(enddate, 'yyyymmddhh24') as enddate, 
		           realuser, fk_smcatgono, fk_lgcatgono, 
		           to_char(reservdate, 'yyyymmddhh24') as reservdate, 
		           confirm,  status, return_time,
		           name, fk_empno, department
		    from tbl_reservation R
		    join tbl_employee E
		    ON  R.fk_empno = E.empno
		
			<choose>
				<when test='startdate == "" and enddate == ""'></when>
				
				<otherwise>
					where (( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					or  ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) )					
				
					<!-- 검색타입과 검색어가 없는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord == ""'></if>
					
					<!-- 검색 타입은 있고 검색어가 없는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord == ""'>
						and R.fk_lgcatgono = #{pagination.searchType}
					</if>
					
					<!--  검색 타입은 없고 검색어가 있는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord != ""'>
						and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%' or  lower(name) like '%'||lower(#{pagination.searchWord})||'%')
					</if>
					
					<!-- 검색 타입과 검색어가 모두 있는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord != ""'>
						and R.fk_lgcatgono = #{pagination.searchType}
						and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%' or lower(name) like '%'||lower(#{pagination.searchWord})||'%')
					</if>
				
				</otherwise>	
			</choose>
		)
	</select>
	
	
	<!-- 한 페이지에 표시할 관리자 예약 내역 글 목록 -->
	<resultMap type="HashMap" id="getResrvAdminMap">
		<result property="reservationno" 	column="reservationno" 	javaType="String" />
		<result property="startdate" 		column="startdate" 		javaType="String" />
		<result property="enddate" 			column="enddate" 		javaType="String" />
		<result property="realuser" 		column="realuser" 		javaType="String" />
		<result property="fk_smcatgono" 	column="fk_smcatgono" 	javaType="String" />
		<result property="fk_lgcatgono" 	column="fk_lgcatgono" 	javaType="String" />
		<result property="reservdate" 		column="reservdate" 	javaType="String" />
		<result property="confirm" 			column="confirm" 		javaType="String" />
		<result property="status" 			column="status" 		javaType="String" />
		<result property="return_time" 		column="return_time" 	javaType="String" />
		<result property="name" 			column="name" 			javaType="String" />
		<result property="fk_empno" 		column="fk_empno" 		javaType="String" />
		<result property="department" 		column="department" 	javaType="String" />
		<result property="smcatgoname" 		column="smcatgoname" 	javaType="String" />
		<result property="startdate_view" 	column="startdate_view" javaType="String" />
		<result property="enddate_view" 	column="enddate_view" 	javaType="String" />
	</resultMap>
	<select id="getResrvAdminList" parameterType="HashMap" resultMap="getResrvAdminMap">
		select reservationno, startdate, enddate, realuser, fk_smcatgono, fk_lgcatgono, reservdate, confirm, status, return_time,
		       name, fk_empno, department, smcatgoname, startdate_view, enddate_view
		from 
		(
		    select row_number() over(order by reservationno desc) as rno,
			reservationno, 
			to_char(startdate, 'yyyymmddhh24') as startdate, to_char(enddate, 'yyyymmddhh24') as enddate, 
			to_char(startdate, 'yyyy-mm-dd hh24:mi') as startdate_view, to_char(enddate, 'yyyy-mm-dd hh24:mi') as enddate_view,
			realuser, R.fk_smcatgono, R.fk_lgcatgono, smcatgoname,
			to_char(reservdate, 'yyyymmddhh24') as reservdate, 
			confirm,  status, return_time,
			E.name, R.fk_empno, department
		    from tbl_reservation R
		    join tbl_employee E
		    ON  R.fk_empno = E.empno
		    join tbl_reservation_small_category C
		    ON R.fk_smcatgono = C.smcatgono
		
			<choose>
				<when test='startdate == "" and enddate == ""'></when>
				
				<otherwise>
					where (( to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
					or  ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ) )					
				
					<!-- 검색타입과 검색어가 없는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord == ""'></if>
					
					<!-- 검색 타입은 있고 검색어가 없는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord == ""'>
						and R.fk_lgcatgono = #{pagination.searchType}
					</if>
					
					<!--  검색 타입은 없고 검색어가 있는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord != ""'>
						and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%'  or lower(name) like '%'||lower(#{pagination.searchWord})||'%')
					</if>
					
					<!-- 검색 타입과 검색어가 모두 있는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord != ""'>
						and R.fk_lgcatgono = #{pagination.searchType}
						and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%' or lower(name) like '%'||lower(#{pagination.searchWord})||'%')
					</if>
				
				</otherwise>	
			</choose>
		)
		where rno between #{pagination.startRno} and #{pagination.endRno}
	</select>
		
		
	<!-- 관리자 예약 내역 확인에서 예약 상태 가져오기 -->
	<select id="statusButton" resultType="com.spring.groovy.reservation.model.ReservationVO">
		select reservationno, status, confirm, to_char(startdate, 'yyyymmddhh24mi') as startdate, to_char(enddate, 'yyyymmddhh24mi') as enddate
		from tbl_reservation
	</select>
		
		
	<!-- 자원 예약 승인 메소드 -->	
	<update id="reservConfirm" parameterType="HashMap">
	 	UPDATE tbl_reservation SET confirm=1 WHERE reservationno = #{reservationno}
	</update>		
		
	
	<!-- 자원 예약 취소 메소드 -->
	<update id="reservCancle" parameterType="HashMap">
		UPDATE tbl_reservation SET status = 1 WHERE reservationno = #{reservationno}
	</update>	
		
	
	<!-- 자원 반납 메소드 -->	
	<update id="reservReturn" parameterType="HashMap">
		UPDATE tbl_reservation SET status = 2, return_time = sysdate, enddate = to_date(#{enddate}, 'yyyymmddhh24miss') WHERE reservationno = #{reservationno}
	</update>
		
		
	<!-- 예약 내역 상세보기 -->
	<resultMap type="HashMap" id="viewReservationMap">
		<result property="reservationno" 	column="reservationno" 	javaType="String" />
		<result property="startdate" 		column="startdate" 		javaType="String" />
		<result property="enddate" 			column="enddate" 		javaType="String" />
		<result property="smcatgoname" 		column="smcatgoname" 	javaType="String" />
		<result property="lgcatgoname" 		column="lgcatgoname" 	javaType="String" />
		<result property="realuser" 		column="realuser" 		javaType="String" />
		<result property="empno" 			column="empno" 			javaType="String" />
		<result property="cpemail" 			column="cpemail" 	javaType="String" />
		<result property="name" 			column="name" 			javaType="String" />
		<result property="status" 			column="status" 		javaType="String" />
		<result property="confirm" 			column="confirm" 		javaType="String" />
	</resultMap>
	<select id="viewReservation" parameterType="HashMap" resultMap="viewReservationMap">
		select reservationno, to_char(startdate,'YYYY-MM-DD hh24:mi') as startdate, to_char(enddate,'YYYY-MM-DD hh24:mi') as enddate,
		       C.smcatgoname, L.lgcatgoname, 
		       nvl(R.realuser, E.name||'('||E.cpemail||')') as realuser, 
		       E.empno, E.cpemail, E.name, R.status, R.confirm
		from tbl_reservation R
		join tbl_employee E
		ON  R.fk_empno = E.empno
		join tbl_reservation_small_category C
		ON R.fk_smcatgono = C.smcatgono
		join tbl_reservation_large_category L
		ON C.fk_lgcatgono = L.lgcatgono
		where R.reservationno = #{reservationno}
	</select>	
	
	
	
	<!-- 이용자 예약 내역 전체 개수 구하기 -->	
	<select id="getResrvSearchCnt" parameterType="HashMap" resultType="int">
	
		select count(*)
		from 
		(
		    select row_number() over(order by reservationno desc) as rno,
		           reservationno, to_char(startdate, 'yyyymmddhh24') as startdate, to_char(enddate, 'yyyymmddhh24') as enddate, 
		           realuser, fk_smcatgono, fk_lgcatgono, 
		           to_char(reservdate, 'yyyymmddhh24') as reservdate, 
		           confirm,  status, return_time,
		           name, fk_empno, department
		    from tbl_reservation R
		    join tbl_employee E
		    ON  R.fk_empno = E.empno
			where (R.fk_empno = #{empno} or lower(R.realuser) like '%'||lower(#{cpemail})||'%')
					
				<if test='startdate != "" and enddate != ""'>
					and  ((to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
							or  ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ))
							
					<!-- 검색타입과 검색어가 없는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord == ""'>
					</if>
					
					<!-- 검색 타입은 있고 검색어가 없는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord == ""'>
						   and R.fk_lgcatgono = #{pagination.searchType}
					</if>
					
					<!--  검색 타입은 없고 검색어가 있는 경우 -->
					<if test='pagination.searchType == "" and pagination.searchWord != ""'>
						  and lower(realuser) like '%'||lower(#{pagination.searchWord})||'%'  or lower(name) like '%'||lower(#{pagination.searchWord})||'%'
					</if>
					
					<!-- 검색 타입과 검색어가 모두 있는 경우 -->
					<if test='pagination.searchType != "" and pagination.searchWord != ""'>
						  and R.fk_lgcatgono = #{pagination.searchType}
						  and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%' or lower(name) like '%'||lower(#{pagination.searchWord})||'%')
					</if>
				
				</if>	
		)
	</select>
	
	
	
	<!-- 한 페이지에 표시할 이용자 예약 내역 글 목록 -->
	<resultMap type="HashMap" id="getResrvMap">
		<result property="reservationno" 	column="reservationno" 	javaType="String" />
		<result property="startdate" 		column="startdate" 		javaType="String" />
		<result property="enddate" 			column="enddate" 		javaType="String" />
		<result property="realuser" 		column="realuser" 		javaType="String" />
		<result property="fk_smcatgono" 	column="fk_smcatgono" 	javaType="String" />
		<result property="fk_lgcatgono" 	column="fk_lgcatgono" 	javaType="String" />
		<result property="reservdate" 		column="reservdate" 	javaType="String" />
		<result property="confirm" 			column="confirm" 		javaType="String" />
		<result property="status" 			column="status" 		javaType="String" />
		<result property="return_time" 		column="return_time" 	javaType="String" />
		<result property="name" 			column="name" 			javaType="String" />
		<result property="fk_empno" 		column="fk_empno" 		javaType="String" />
		<result property="department" 		column="department" 	javaType="String" />
		<result property="smcatgoname" 		column="smcatgoname" 	javaType="String" />
		<result property="startdate_view" 	column="startdate_view" javaType="String" />
		<result property="enddate_view" 	column="enddate_view" 	javaType="String" />
	</resultMap>
	<select id="getResrvList" parameterType="HashMap" resultMap="getResrvMap">
		select reservationno, startdate, enddate, realuser, fk_smcatgono, fk_lgcatgono, reservdate, confirm, status, return_time,
		       name, fk_empno, department, smcatgoname, startdate_view, enddate_view
		from 
		(
		    select row_number() over(order by reservationno desc) as rno,
			reservationno, 
			to_char(startdate, 'yyyymmddhh24') as startdate, to_char(enddate, 'yyyymmddhh24') as enddate, 
			to_char(startdate, 'yyyy-mm-dd hh24:mi') as startdate_view, to_char(enddate, 'yyyy-mm-dd hh24:mi') as enddate_view,
			realuser, R.fk_smcatgono, R.fk_lgcatgono, smcatgoname,
			to_char(reservdate, 'yyyymmddhh24') as reservdate, 
			confirm,  status, return_time,
			E.name, R.fk_empno, department
		    from tbl_reservation R
		    join tbl_employee E
		    ON  R.fk_empno = E.empno
		    join tbl_reservation_small_category C
		    ON R.fk_smcatgono = C.smcatgono
			where (R.fk_empno = #{empno} or lower(R.realuser) like '%'||lower(#{cpemail})||'%')
				
			<if test='startdate != "" and enddate != ""'>
				and  ((to_char(startdate,'YYYY-MM-DD') between #{startdate} and #{enddate} )
						or  ( to_char(enddate,'YYYY-MM-DD') between #{startdate} and #{enddate} ))
						
				<!-- 검색타입과 검색어가 없는 경우 -->
				<if test='pagination.searchType == "" and pagination.searchWord == ""'>
				</if>
				
				<!-- 검색 타입은 있고 검색어가 없는 경우 -->
				<if test='pagination.searchType != "" and pagination.searchWord == ""'>
					   and R.fk_lgcatgono = #{pagination.searchType}
				</if>
				
				<!--  검색 타입은 없고 검색어가 있는 경우 -->
				<if test='pagination.searchType == "" and pagination.searchWord != ""'>
					  and lower(realuser) like '%'||lower(#{pagination.searchWord})||'%'  or lower(name) like '%'||lower(#{pagination.searchWord})||'%'
				</if>
				
				<!-- 검색 타입과 검색어가 모두 있는 경우 -->
				<if test='pagination.searchType != "" and pagination.searchWord != ""'>
					  and R.fk_lgcatgono = #{pagination.searchType}
					  and (lower(realuser) like '%'||lower(#{pagination.searchWord})||'%' or lower(name) like '%'||lower(#{pagination.searchWord})||'%')
				</if>
			
			</if>	
		)
		where rno between #{pagination.startRno} and #{pagination.endRno}
	</select>
	
	
	<!-- 자원 목록 -->
	<resultMap type="HashMap" id="resourceMap">
		<result property="smcatgono" 	column="smcatgono" 		javaType="String" />
		<result property="smcatgoname" 	column="smcatgoname"	javaType="String" />
		<result property="sc_status" 	column="sc_status" 		javaType="String" />
		<result property="fk_empno" 	column="fk_empno" 		javaType="String" />
		<result property="lgcatgono" 	column="lgcatgono" 		javaType="String" />
		<result property="lgcatgoname" 	column="lgcatgoname" 	javaType="String" />
	</resultMap>
	<select id="managementResource" resultMap="resourceMap">
		select smcatgono, smcatgoname, sc_status, C.fk_empno, L.lgcatgono, lgcatgoname
		from tbl_reservation_small_category C 
		JOIN tbl_reservation_large_category L
		ON C.fk_lgcatgono = L.lgcatgono
		order by L.lgcatgono, C.smcatgono
	</select>
	
	
	<!-- 자원명 수정 메소드 -->
	<update id="editSmcatgoname" parameterType="HashMap">
		UPDATE tbl_reservation_small_category SET smcatgoname = #{smcatgoname}, fk_empno = #{fk_empno} WHERE smcatgono = #{smcatgono}
	</update>
	
	
	<!-- 자원 추가 메소드 -->
	<insert id="addSmcatgo" parameterType="HashMap">
		insert into tbl_reservation_small_category(smcatgono, fk_lgcatgono, smcatgoname, fk_empno, sc_status)
		values(seq_reserv_smcatgono.nextval, #{fk_lgcatgono}, #{smcatgoname}, #{fk_empno}, 1)
	</insert>
	
	
	<!-- 자원 상태 변경 메소드 -->
	<update id="changeStatus" parameterType="HashMap">
		<!-- 이용 가능 상태에서 이용 불가로 변경 -->
		<if test="sc_status == 1">
			UPDATE tbl_reservation_small_category SET fk_empno = #{empno}, sc_status = 0 WHERE smcatgono = #{smcatgono}
		</if>
	
		<!-- 이용 불가 상태에서 이용 가능으로 변경 -->
		<if test="sc_status == 0">
			UPDATE tbl_reservation_small_category SET fk_empno = #{empno}, sc_status = 1 WHERE smcatgono = #{smcatgono}
		</if>
	</update>
	
	
	<!-- 버튼 클릭 시 자원 항목 리스트 변경 메소드 -->
	<resultMap type="HashMap" id="resourceFilterMap">
		<result property="smcatgono" 	column="smcatgono" 		javaType="String" />
		<result property="smcatgoname" 	column="smcatgoname"	javaType="String" />
		<result property="sc_status" 	column="sc_status" 		javaType="String" />
		<result property="fk_empno" 	column="fk_empno" 		javaType="String" />
		<result property="lgcatgono" 	column="lgcatgono" 		javaType="String" />
		<result property="lgcatgoname" 	column="lgcatgoname" 	javaType="String" />
	</resultMap>
	<select id="resourceFilter" parameterType="HashMap" resultMap="resourceFilterMap">
		select smcatgono, smcatgoname, sc_status, C.fk_empno, lgcatgono, lgcatgoname
		from tbl_reservation_small_category C 
		JOIN tbl_reservation_large_category L
		ON C.fk_lgcatgono = L.lgcatgono
		<if test='fk_lgcatgono != 999'>
			where L.lgcatgono = #{fk_lgcatgono}
		</if>
        
		order by lgcatgono, smcatgono
	</select>
	
	
	<!-- 예약 안내 페이지 수정 -->
	<select id="editResourceContent" parameterType="HashMap" resultType="com.spring.groovy.reservation.model.ReservLargeCategoryVO">
		select lgcatgono, lgcatgoname, lgcategcontent, fk_empno
		from tbl_reservation_large_category
		where lgcatgono = #{lgcatgono}
	</select>
	
	
	<!-- 자원 안내 수정 최종 -->
	<update id="endEditResourceContent" parameterType="HashMap">
		UPDATE tbl_reservation_large_category 
		SET fk_empno = #{empno}, lgcategcontent = #{lgcategcontent}
		WHERE lgcatgono = #{lgcatgono}
	</update>
	
	
	<!-- 자원 안내 내용 보여주기 -->
	<select id="mainLgcategContent" parameterType="String" resultType="com.spring.groovy.reservation.model.ReservLargeCategoryVO">
		select lgcatgono, lgcatgoname, lgcategcontent, fk_empno
		from tbl_reservation_large_category
		where lgcatgono = #{lgcatgono}
	</select>
		
		
		
</mapper>