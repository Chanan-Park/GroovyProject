<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="chanan">

	<!-- 팀 문서함 게시글 수 조회 -->
	<select id="getTeamDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*) FROM VIEW_TEAM_DRAFT
		WHERE 1=1
		<if test='fk_department_no != "1" '>
		AND fk_department_no = #{fk_department_no}
		</if>
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
	
	<!-- 팀 문서함 목록 조회 -->
	<select id="getTeamDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM
		            VIEW_TEAM_DRAFT
            		WHERE 1=1
					<if test='fk_department_no != "1" '>
					AND fk_department_no = #{fk_department_no}
					</if>
		            <if test='searchType != "" and searchWord != "" '>
		            AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		            </if>
					ORDER BY ${sortType} ${sortOrder}
		            )A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
		
	<!-- 개인 문서함-상신함 게시글 수 조회 -->
	<select id="getSentDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*) FROM VIEW_DRAFT_SENT
		WHERE FK_DRAFT_EMPNO = #{empno}
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
	
	<!-- 개인문서함-상신함 목록 조회 -->
	<select id="getSentDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM
		            VIEW_DRAFT_SENT
		            WHERE FK_DRAFT_EMPNO = #{empno}
		            <if test='searchType != "" and searchWord != "" '>
		            AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		            </if>
		            ORDER BY ${sortType} ${sortOrder}
		            )A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
		
	<!-- 개인 문서함-결재함 게시글 수 조회 -->
	<select id="getProcessedDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*) FROM VIEW_DRAFT_PROCESSED
		WHERE FK_APPROVAL_EMPNO = #{empno}
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
	
	<!-- 개인문서함-결재함 목록 조회 -->
	<select id="getProcessedDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM
		            VIEW_DRAFT_PROCESSED
		            WHERE FK_APPROVAL_EMPNO = #{empno}
		            <if test='searchType != "" and searchWord != "" '>
		            AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		            </if>
		            ORDER BY ${sortType} ${sortOrder}
		            )A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
		
	<!-- 개인 문서함-임시저장함 게시글 수 조회 -->
	<select id="getSavedDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*) FROM TBL_TEMP_DRAFT
		WHERE FK_DRAFT_EMPNO = #{empno}
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
	
	<!-- 개인문서함-임시저장함 목록 조회 -->
 	<select id="getSavedDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM (SELECT DRAFT_TYPE, TEMP_DRAFT_NO AS DRAFT_NO, FK_DRAFT_EMPNO, DRAFT_DATE,
					DRAFT_SUBJECT, NAME AS DRAFT_EMP_NAME
					FROM TBL_TEMP_DRAFT JOIN
					TBL_EMPLOYEE
					ON EMPNO = FK_DRAFT_EMPNO
					WHERE FK_DRAFT_EMPNO = #{empno}
					<if test='searchType != "" and searchWord != "" '>
					AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
					</if>
					ORDER BY ${sortType} ${sortOrder}
					)A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
	
	<!-- 홈 - 결재완료 문서 5개 조회 -->
	<select id="getMyDraftProcessed" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="String" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM
		            VIEW_DRAFT_SENT
		            WHERE DRAFT_STATUS != 0
		            AND FK_DRAFT_EMPNO = #{empno}
		            ORDER BY APPROVAL_DATE DESC
		            )A )
		WHERE RNO BETWEEN 1 AND 5
	</select>
	
	<!-- 홈 - 진행중 문서 조회 -->
	<select id="getMyDraftProcessing" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="String" >
		SELECT *
        FROM
        VIEW_DRAFT_SENT
        WHERE DRAFT_STATUS = 0
        AND FK_DRAFT_EMPNO = #{empno}
        ORDER BY DRAFT_DATE DESC
	</select>
	
	<!-- 내가 결재해야 할 문서의 문서번호-->
	<select id="getRequestedDraftNo" resultType="String" parameterType="HashMap" >
		SELECT FK_DRAFT_NO
		FROM TBL_APPROVAL A
		WHERE FK_APPROVAL_EMPNO = #{empno} AND APPROVAL_STATUS = 0
		AND FK_DRAFT_NO IN (SELECT FK_DRAFT_NO
		                    FROM TBL_APPROVAL
	  	                    WHERE (LEVELNO = (A.LEVELNO - 1) AND APPROVAL_STATUS = 1)
	                        OR A.LEVELNO = 1)
	</select>
			
	<!-- 결재대기문서 게시글 수 조회 -->
	<select id="getRequestedDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*)
		FROM VIEW_DRAFT_APPROVAL
		WHERE DRAFT_NO IN
		<foreach collection="draftNoList" item="list" open="(" close=")" separator=",">
			#{list}
		</foreach>
		AND FK_APPROVAL_EMPNO = #{empno}
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
		
	<!-- 결재대기문서 목록 조회 -->
	<select id="getRequestedDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM VIEW_DRAFT_APPROVAL
					WHERE DRAFT_NO IN
					<foreach collection="draftNoList" item="list" open="(" close=")" separator=",">
						#{list}
					</foreach>
					AND FK_APPROVAL_EMPNO = #{empno}
		            <if test='searchType != "" and searchWord != "" '>
		            AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		            </if>
		            ORDER BY URGENT_STATUS DESC, ${sortType} ${sortOrder}
		            )A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
		
	<!-- 결재 예정 문서의 문서번호-->
	<select id="getUpcomingDraftNo" resultType="String" parameterType="HashMap" >
	    SELECT FK_DRAFT_NO, LEVELNO
		FROM TBL_APPROVAL A
		WHERE FK_APPROVAL_EMPNO = #{empno} AND APPROVAL_STATUS = 0
		AND FK_DRAFT_NO IN (SELECT FK_DRAFT_NO
		                    FROM TBL_APPROVAL
	  	                    WHERE LEVELNO = (A.LEVELNO - 1) AND APPROVAL_STATUS = 0
	                        )
	</select>
				
	<!-- 결재 예정 문서 게시글 수 조회 -->
	<select id="getUpcomingDraftCnt" resultType="int" parameterType="HashMap" >
		SELECT COUNT(*)
		FROM VIEW_DRAFT_APPROVAL
		WHERE DRAFT_NO IN
		<foreach collection="draftNoList" item="list" open="(" close=")" separator=",">
			#{list}
		</foreach>
		AND FK_APPROVAL_EMPNO = #{empno}
		<if test='searchType != "" and searchWord != "" '>
		AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		</if>
	</select>
			
	<!-- 결재예정문서 목록 조회 -->
	<select id="getUpcomingDraftList" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="HashMap" >
		SELECT * 
		FROM ( SELECT A.*, ROWNUM AS RNO
		    FROM ( SELECT *
		            FROM VIEW_DRAFT_APPROVAL
					WHERE DRAFT_NO IN
					<foreach collection="draftNoList" item="list" open="(" close=")" separator=",">
						#{list}
					</foreach>
					AND FK_APPROVAL_EMPNO = #{empno}
		            <if test='searchType != "" and searchWord != "" '>
		            AND LOWER(${searchType}) LIKE '%'||LOWER(#{searchWord})||'%'
		            </if>
		            ORDER BY URGENT_STATUS DESC, ${sortType} ${sortOrder}
		            )A )
		WHERE RNO BETWEEN #{startRno} AND #{endRno}
	</select>
	
	<!-- 사원 목록 조회 -->
	<resultMap type="HashMap" id="empMap">
		<result property="empno" column="empno" javaType="String"/>
		<result property="department" column="department" javaType="String"/>
		<result property="name" column="name" javaType="String"/>
		<result property="position" column="position" javaType="String"/>
		<result property="position_no" column="position_no" javaType="String"/>
	</resultMap>
	
	<select id="getEmpList" resultMap="empMap" parameterType="HashMap">
		SELECT EMPNO, DEPARTMENT, NAME, E.POSITION AS POSITION, POSITION_NO
		FROM TBL_EMPLOYEE E JOIN TBL_POSITION P 
		ON E.FK_POSITION_NO = P.POSITION_NO
		<if test='type == "personal"'>
		WHERE EMPNO != #{loginuser.empno}
		AND POSITION_NO > #{loginuser.fk_position_no}
		</if>
		ORDER BY POSITION_NO DESC
	</select>

	<!-- 부문 목록 조회 -->
	<resultMap type="HashMap" id="bumunMap">
		<result property="bumun_no" column="bumun_no" javaType="String"/>
		<result property="bumun" column="bumun" javaType="String"/>
	</resultMap>
	
	<select id="getBumunList" resultMap="bumunMap" parameterType="HashMap">
		SELECT BUMUN_NO, BUMUN
		FROM TBL_BUMUN
		<if test='type == "personal"'>
		WHERE BUMUN_NO = #{loginuser.fk_bumun_no} OR BUMUN_NO = 1
		</if>
		ORDER BY BUMUN_NO
	</select>

	<!-- 부서 목록 조회 -->
	<resultMap type="HashMap" id="deptMap">
		<result property="department_no" column="department_no" javaType="String"/>
		<result property="department" column="department" javaType="String"/>
		<result property="bumun_no" column="bumun_no" javaType="String"/>
		<result property="bumun" column="bumun" javaType="String"/>
	</resultMap>
	
	<select id="getDeptList" resultMap="deptMap" parameterType="HashMap">
		SELECT DEPARTMENT_NO, DEPARTMENT, BUMUN_NO, BUMUN
		FROM TBL_DEPARTMENT JOIN TBL_BUMUN
		ON BUMUN_NO = FK_BUMUN_NO
		<if test='type == "personal"'>
		WHERE DEPARTMENT_NO = #{loginuser.fk_department_no} OR DEPARTMENT_NO = 1
		</if>
		ORDER BY DEPARTMENT_NO
	</select>
	
	<!-- 결재라인 저장하기 -->
	<insert id="saveApprovalLine" parameterType="com.spring.groovy.approval.model.SavedAprvLineVO">
		INSERT INTO TBL_SAVED_APRV_LINE
		VALUES (SEQ_APRV_LINE_NO.nextval, #{aprv_line_name}, #{fk_empno}, #{fk_approval_empno1}, #{fk_approval_empno2, jdbcType=INTEGER}, #{fk_approval_empno3, jdbcType=INTEGER}, #{fk_approval_empno4, jdbcType=INTEGER})
	</insert>
		
	<!-- 결재라인 수정하기 -->
	<update id="editApprovalLine" parameterType="com.spring.groovy.approval.model.SavedAprvLineVO">
		UPDATE TBL_SAVED_APRV_LINE
		SET FK_APPROVAL_EMPNO1 = #{fk_approval_empno1}, FK_APPROVAL_EMPNO2 = #{fk_approval_empno2, jdbcType=INTEGER}, 
			FK_APPROVAL_EMPNO3 = #{fk_approval_empno3, jdbcType=INTEGER}, FK_APPROVAL_EMPNO4 = #{fk_approval_empno4, jdbcType=INTEGER}
		WHERE APRV_LINE_NO = #{aprv_line_no}
	</update>
		
	<!-- 결재라인 삭제하기 -->
	<update id="delApprovalLine" parameterType="com.spring.groovy.approval.model.SavedAprvLineVO">
		DELETE FROM TBL_SAVED_APRV_LINE
		WHERE APRV_LINE_NO = #{aprv_line_no}
	</update>
	
	<!-- 저장된 결재라인 불러오기 -->
	<select id="getSavedAprvLine" resultType="com.spring.groovy.approval.model.SavedAprvLineVO" parameterType="HashMap">
		SELECT APRV_LINE_NO, APRV_LINE_NAME, FK_APPROVAL_EMPNO1, FK_APPROVAL_EMPNO2, FK_APPROVAL_EMPNO3, FK_APPROVAL_EMPNO4
		FROM TBL_SAVED_APRV_LINE
		WHERE FK_EMPNO = #{empno}
	</select>
	
	<!-- 저장된 결재라인 결재자 정보 불러오기 -->
	<select id="getSavedAprvEmpInfo" resultType="com.spring.groovy.management.model.MemberVO" parameterType="java.util.List">
		SELECT DEPARTMENT, A.POSITION, NAME, POSITION_NO, EMPNO
		FROM TBL_EMPLOYEE A JOIN TBL_POSITION B
		ON A.POSITION = B.POSITION
		WHERE EMPNO IN
		<foreach collection="list" item="list" open="(" close=")" separator=",">
			#{list, jdbcType=VARCHAR}
		</foreach>
		ORDER BY POSITION_NO
	</select>
	
	<!-- 저장된 결재라인 결재자 정보 - 결재라인번호로 조회 -->
	<select id="getOneAprvLine" resultType="com.spring.groovy.management.model.MemberVO" parameterType="String">
		SELECT EMPNO, NAME, POSITION, FK_POSITION_NO, DEPARTMENT
		FROM TBL_EMPLOYEE
		WHERE EXISTS
					(SELECT 1
					FROM TBL_SAVED_APRV_LINE
					WHERE 
					APRV_LINE_NO = #{official_aprv_line_no}
					AND (
					EMPNO = FK_APPROVAL_EMPNO1
					OR EMPNO = FK_APPROVAL_EMPNO2
					OR EMPNO = FK_APPROVAL_EMPNO3
					OR EMPNO = FK_APPROVAL_EMPNO4))
		ORDER BY FK_POSITION_NO
	</select>
	
	<!-- 공통 결재라인 목록 조회 -->
	<resultMap type="HashMap" id="officialAprvMap">
		<result property="official_aprv_line_no" column="official_aprv_line_no" javaType="String"/>
		<result property="draft_type" column="draft_type" javaType="String"/>
		<result property="fk_approval_empno1" column="fk_approval_empno1" javaType="String"/>
		<result property="fk_approval_empno2" column="fk_approval_empno2" javaType="String"/>
		<result property="fk_approval_empno3" column="fk_approval_empno3" javaType="String"/>
		<result property="fk_approval_empno4" column="fk_approval_empno4" javaType="String"/>
	</resultMap>
	
	<select id="getOfficialAprvList" resultMap="officialAprvMap">
		SELECT OFFICIAL_APRV_LINE_NO, DRAFT_TYPE, FK_APPROVAL_EMPNO1, FK_APPROVAL_EMPNO2, FK_APPROVAL_EMPNO3, FK_APPROVAL_EMPNO4
		FROM TBL_OFFICIAL_APRV_LINE JOIN TBL_DRAFT_TYPE
		ON FK_DRAFT_TYPE_NO = DRAFT_TYPE_NO
	</select>

	<!-- 공통결재라인 이름으로 조회 -->	
	<select id="getOneOfficialAprvLine" resultType="com.spring.groovy.management.model.MemberVO" parameterType="String">
		SELECT EMPNO, NAME, POSITION, FK_POSITION_NO, DEPARTMENT
		FROM TBL_EMPLOYEE
		WHERE EXISTS
					(SELECT 1
					FROM TBL_OFFICIAL_APRV_LINE
					WHERE 
					OFFICIAL_APRV_LINE_NO = #{official_aprv_line_no}
					AND (
					EMPNO = FK_APPROVAL_EMPNO1
					OR EMPNO = FK_APPROVAL_EMPNO2
					OR EMPNO = FK_APPROVAL_EMPNO3
					OR EMPNO = FK_APPROVAL_EMPNO4))
		ORDER BY FK_POSITION_NO
	</select>
	
	<!-- 기안문서 시퀀스번호 얻어오기 -->
	<select id="getDraftNo" resultType="int">
		SELECT SEQ_DRAFT_NO.NEXTVAL FROM DUAL
	</select>
	
	<!-- 기안문서 등록하기 -->
	<insert id="addDraft" parameterType="com.spring.groovy.approval.model.DraftVO">
		INSERT INTO TBL_DRAFT (DRAFT_NO, FK_DRAFT_TYPE_NO, DRAFT_TYPE, FK_DRAFT_EMPNO,
		DRAFT_SUBJECT, DRAFT_CONTENT, DRAFT_COMMENT, URGENT_STATUS)
		values(#{draft_no}, #{fk_draft_type_no}, #{draft_type}, #{fk_draft_empno}, #{draft_subject},
		#{draft_content}, #{draft_comment}, #{urgent_status})
	</insert>
	
	<!-- 결재정보 등록하기 -->
	<update id="addApproval" parameterType="java.util.List">
		INSERT INTO TBL_APPROVAL (APPROVAL_NO, FK_DRAFT_NO, FK_APPROVAL_EMPNO, LEVELNO, EXTERNAL)
		SELECT SEQ_APPROVAL_NO.NEXTVAL AS APPROVAL_NO, A.* 
		FROM (
		<foreach collection="list" item="apvo" index="index" separator="union all">
			SELECT #{apvo.fk_draft_no} as FK_DRAFT_NO
	        , #{apvo.fk_approval_empno} as FK_APPROVAL_EMPNO
	        , #{apvo.levelno} as LEVELNO
	        , #{apvo.external} as EXTERNAL
	 		FROM DUAL
       </foreach>) A
	</update>
	
	<!-- 첨부파일 등록하기 -->
	<update id="addFiles" parameterType="java.util.List">
		INSERT INTO TBL_DRAFT_FILE (DRAFT_FILE_NO, FK_DRAFT_NO, ORIGINALFILENAME, FILENAME, FILESIZE)
		SELECT SEQ_DRAFT_FILE_NO.NEXTVAL AS DRAFT_FILE_NO, A.* 
		FROM (
		<foreach collection="list" item="dfvo" separator="union all">
			SELECT #{dfvo.fk_draft_no} AS FK_DRAFT_NO, #{dfvo.originalFilename} AS ORIGINALFILENAME,
			#{dfvo.filename} AS FILENAME, #{dfvo.filesize} AS FILESIZE FROM DUAL
		</foreach>) A
	</update>
	
	<!-- 지출내역 등록하기 -->
	<update id="addExpenseList" parameterType="java.util.List">
		INSERT INTO TBL_EXPENSE_LIST (EXPENSE_LIST_NO, FK_DRAFT_NO, EXPENSE_DATE, EXPENSE_TYPE, 
									EXPENSE_DETAIL, EXPENSE_AMOUNT, EXPENSE_REMARK)
		SELECT SEQ_EXPENSE_LIST_NO.NEXTVAL AS EXPENSE_LIST_NO, A.* 
		FROM (
		<foreach collection="list" item="evo" separator="union all">
			SELECT #{evo.fk_draft_no} AS FK_DRAFT_NO, #{evo.expense_date} AS EXPENSE_DATE,
			#{evo.expense_type} AS EXPENSE_TYPE, #{evo.expense_detail} AS EXPENSE_DETAIL,
			#{evo.expense_amount} AS EXPENSE_AMOUNT, #{evo.expense_remark, jdbcType = VARCHAR} AS EXPENSE_REMARK FROM DUAL
		</foreach>) A
	</update>
		
	<!-- 출장보고 등록하기 -->
	<insert id="addBiztripReport" parameterType="com.spring.groovy.approval.model.BiztripReportVO">
		INSERT INTO TBL_BIZTRIP_REPORT
		(BIZTRIP_REPORT_NO, FK_DRAFT_NO, TRIP_PURPOSE, TRIP_START_DATE, TRIP_END_DATE, TRIP_LOCATION)
		VALUES (SEQ_BIZTRIP_REPORT_NO.NEXTVAL, #{fk_draft_no}, #{trip_purpose}, #{trip_start_date}, #{trip_end_date}, #{trip_location})
	</insert>
	
	<!-- 임시저장문서 시퀀스번호 얻어오기 -->
	<select id="getTempDraftNo" resultType="int">
		SELECT SEQ_TEMP_DRAFT_NO.NEXTVAL FROM DUAL
	</select>
	
	<!-- 기안 임시저장하기 -->
	<insert id="saveDraft" parameterType="com.spring.groovy.approval.model.DraftVO">
		INSERT INTO TBL_TEMP_DRAFT
		(TEMP_DRAFT_NO, FK_DRAFT_EMPNO, DRAFT_SUBJECT, DRAFT_CONTENT, DRAFT_TYPE, FK_DRAFT_TYPE_NO)
		VALUES (#{draft_no}, #{fk_draft_empno}, #{draft_subject, jdbcType = VARCHAR}, #{draft_content, jdbcType = VARCHAR},
		 #{draft_type, jdbcType = VARCHAR}, #{fk_draft_type_no, jdbcType = INTEGER})
	</insert>
	
	<!-- 임시저장 결재정보 등록하기 -->
	<update id="saveApproval" parameterType="java.util.List">
		INSERT INTO TBL_TEMP_APPROVAL (TEMP_APPROVAL_NO, FK_TEMP_DRAFT_NO, FK_APPROVAL_EMPNO, LEVELNO)
		SELECT SEQ_TEMP_APPROVAL_NO.NEXTVAL AS APPROVAL_NO, A.* 
		FROM (
		<foreach collection="list" item="apvo" index="index" separator="union all">
			SELECT #{apvo.fk_draft_no} as FK_DRAFT_NO
	        , #{apvo.fk_approval_empno} as FK_APPROVAL_EMPNO
	        , (${index}+1) as LEVELNO
	        , #{apvo.external} as EXTERNAL
	 		FROM DUAL
       </foreach>) A
	</update>
		
	<!-- 개인문서함-임시저장함 글 삭제 -->
 	<delete id="deleteDraftList" parameterType="map">
		DELETE FROM TBL_TEMP_DRAFT
		WHERE TEMP_DRAFT_NO IN
		<foreach collection="array" item="seq" open="(" close=")" separator=",">
				#{seq}
		</foreach>
	</delete>
	
	<!-- 30일 지난 임시저장 글 삭제하기 -->
	<delete id="autoDeleteSavedDraft" >
		DELETE TBL_TEMP_DRAFT
		WHERE to_date(DRAFT_DATE, 'yyyy-mm-dd') lte to_date(ADD_MONTHS(sysdate, -1),'yyyy-mm-dd')
	</delete>

	<!-- 기안 문서 조회 -->
	<select id="getDraftInfo" resultType="com.spring.groovy.approval.model.DraftVO" parameterType="com.spring.groovy.approval.model.DraftVO" >
		SELECT D.*, FK_DRAFT_EMPNO, NAME as DRAFT_EMP_NAME, DEPARTMENT AS DRAFT_DEPARTMENT, POSITION, EMPIMG
        FROM TBL_DRAFT D JOIN TBL_EMPLOYEE
        ON EMPNO = FK_DRAFT_EMPNO
		WHERE DRAFT_NO = #{draft_no}
	</select>

	<!-- 기안 결재 정보 조회 -->
	<select id="getApprovalInfo" resultType="com.spring.groovy.approval.model.ApprovalVO" parameterType="com.spring.groovy.approval.model.DraftVO" >
		SELECT A.*, NAME, DEPARTMENT, SIGNIMG, POSITION, EMPIMG
		FROM TBL_APPROVAL A JOIN TBL_EMPLOYEE
		ON EMPNO = FK_APPROVAL_EMPNO
		WHERE FK_DRAFT_NO = #{draft_no}
		ORDER BY LEVELNO
	</select>

	<!-- 기안 문서 파일 조회 -->
	<select id="getDraftFileInfo" resultType="com.spring.groovy.approval.model.DraftFileVO" parameterType="com.spring.groovy.approval.model.DraftVO" >
		SELECT * FROM TBL_DRAFT_FILE
		WHERE FK_DRAFT_NO = #{draft_no}
	</select>

	<!-- 지출내역 조회 -->
	<select id="getExpenseListInfo" resultType="com.spring.groovy.approval.model.ExpenseListVO" parameterType="com.spring.groovy.approval.model.DraftVO" >
		SELECT * FROM TBL_EXPENSE_LIST
		WHERE FK_DRAFT_NO = #{draft_no}
	</select>
	
	<!-- 출장보고 조회 -->
	<select id="getBiztripReportInfo" resultType="com.spring.groovy.approval.model.BiztripReportVO" parameterType="com.spring.groovy.approval.model.DraftVO" >
		SELECT * FROM TBL_BIZTRIP_REPORT
		WHERE FK_DRAFT_NO = #{draft_no}
	</select>
	
	<!-- 첨부파일 1개 조회 -->
	<select id="getAttachedFile" resultType="com.spring.groovy.approval.model.DraftFileVO" parameterType="String" >
		SELECT * FROM TBL_DRAFT_FILE
		WHERE DRAFT_FILE_NO = #{draft_file_no}
	</select>
	
	<!-- 결재 처리하기(프로시저) -->
	<select id="updateApproval" statementType="CALLABLE" >
        { CALL pcd_tbl_approval_update(#{avo.fk_draft_no}, 
           		#{avo.levelno}, #{avo.approval_status}, #{avo.approval_comment,jdbcType=VARCHAR}, 
           		#{o_updateCnt, mode=OUT, jdbcType=INTEGER, javaType=Integer})
       	}	
	</select>
	
	<!-- 양식번호로 공통 결재라인 조회 -->
	<select id="getRecipientList" resultType="com.spring.groovy.management.model.MemberVO" parameterType="String">
		SELECT EMPNO, NAME, DEPARTMENT, SIGNIMG, POSITION, FK_POSITION_NO, EMPIMG
		FROM TBL_EMPLOYEE
		WHERE EXISTS
					(SELECT 1
					FROM TBL_OFFICIAL_APRV_LINE
					WHERE 
					FK_DRAFT_TYPE_NO = #{type_no}
					AND (
					EMPNO = FK_APPROVAL_EMPNO1
					OR EMPNO = FK_APPROVAL_EMPNO2
					OR EMPNO = FK_APPROVAL_EMPNO3
					OR EMPNO = FK_APPROVAL_EMPNO4))
		ORDER BY FK_POSITION_NO
	</select>
		
	<!-- 공통결재라인 저장하기 -->
	<update id="saveOfficialApprovalLine" parameterType="com.spring.groovy.approval.model.OfficialAprvLineVO">
		UPDATE TBL_OFFICIAL_APRV_LINE
		SET FK_APPROVAL_EMPNO1 = #{fk_approval_empno1}, FK_APPROVAL_EMPNO2 = #{fk_approval_empno2, jdbcType=INTEGER}, 
				FK_APPROVAL_EMPNO3 = #{fk_approval_empno3, jdbcType=INTEGER}, FK_APPROVAL_EMPNO4 = #{fk_approval_empno4, jdbcType=INTEGER}
		WHERE OFFICIAL_APRV_LINE_NO = #{official_aprv_line_no}
	</update>
	
	<!-- 서명이미지 수정하기 -->
	<update id="updateSignature" parameterType="HashMap">
		UPDATE TBL_EMPLOYEE
		SET SIGNIMG = #{filename}
		WHERE EMPNO = #{empno}
	</update>
</mapper>